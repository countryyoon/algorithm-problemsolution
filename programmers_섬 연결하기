#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;


bool compare(vector<int> a, vector<int>b){
    if(a[2] == b[2]){
        if(a[1] == b[1]){
            return a[0] < b[0];
        }
        else{
            return a[1] < b[1];
        }        
    }
    else{
        return a[2]<b[2];
    }
}


int getParent(vector<int>&parent, int x){
    if(parent[x]==x)
        return x;
    return parent[x]=getParent(parent, parent[x]);
}


void unionParent(vector<int>& parent, int a, int b){
    a = getParent(parent, a);
    b = getParent(parent, b);
    a<b ? parent[b] = a : parent[a] = b;
}





bool find(vector<int>&parent, int a, int b){
    a = getParent(parent, a);
    b = getParent(parent, b);
    return a==b;
}


int solution(int n, vector<vector<int>> costs) {
    int answer = 0;
    vector<int>parent;
    
    for(int i=0; i<n; i++){
        parent.push_back(i);
    }
    
    sort(costs.begin(), costs.end(), compare);
    
    for(auto cost:costs){
        if(!find(parent,cost[0],cost[1])){
            answer += cost[2];
            unionParent(parent, cost[0], cost[1]);
        }
    }

    return answer;
}
